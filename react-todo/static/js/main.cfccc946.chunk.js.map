{"version":3,"sources":["components/TodoHeader.tsx","components/TodoList.tsx","utils/index.ts","constants/index.ts","components/TodoFooter.tsx","components/AddTodo.tsx","mocks/index.ts","TodoApp.tsx","index.tsx"],"names":["TodoHeader","className","completedStyles","color","textDecoration","TodoList","todos","onDeleteTodo","onCompleteTask","map","todo","key","id","type","checked","completed","onChange","e","style","text","onClick","createUid","i","random","uuid","Math","toString","FILTERS","TodoFooter","activeFilter","onActiveFilter","leftTodos","onClearAll","filter","AddTodo","onNewTodo","onKeyDown","value","target","keyCode","trim","currentTarget","placeholder","autoFocus","mockTodos","strings","forEach","str","index","uid","TodoApp","React","state","setState","Object","keys","t","getTodos","showTodo","getTodosBasedOnFilter","activeTodosNumber","length","getNoOfActiveTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfccc946.chunk.js","sourcesContent":["import * as React from 'react';\n\nconst TodoHeader = () => <h1 className=\"text-center\">TODO List</h1>;\n\nexport default TodoHeader;\n","import * as React from \"react\";\nimport { ToDo } from \"../types\";\n\ninterface TodoListProps {\n  todos: ToDo[];\n  onDeleteTodo: (id: string) => void;\n  onCompleteTask: (id: string) => void;\n}\n\nconst completedStyles = {\n  color: 'grey',\n  textDecoration: \"line-through\",\n}\n\nconst TodoList: React.FC<TodoListProps> = ({\n  todos,\n  onDeleteTodo,\n  onCompleteTask\n}) => {\n  return (\n    <ul className=\"list-group m-3\">\n      {todos.map(todo => {\n        return (\n          <li key={todo.id} className=\"list-group-item\">\n            <input\n              className=\"m-3\"\n              type=\"checkbox\"\n              checked={todo.completed}\n              onChange={e => onCompleteTask(todo.id)}\n            />\n            <span\n              className=\"m-3\"\n              style={todo.completed ? completedStyles : {}}\n            >\n              {todo.text}\n            </span>\n            <button\n              className=\"btn btn-light float-right\"\n              type=\"button\"\n              onClick={e => onDeleteTodo(todo.id)}\n            >\n              x\n            </button>\n            <br />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import { NormalizedTodos, ToDo, Filter } from \"../types\";\nimport { ACTIVE_FILTER, COMPLETED_FILTER, ALL_FILTER } from \"../constants\";\n\nexport const createUid = () : string => {\n  var i, random;\n  var uuid = '';\n\n  for (i = 0; i < 32; i++) {\n    random = Math.random() * 16 | 0;\n    if (i === 8 || i === 12 || i === 16 || i === 20) {\n      uuid += '-';\n    }\n    uuid += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random))\n      .toString(16);\n  }\n\n  return uuid;\n}\n\nexport const getTodos = (todos: NormalizedTodos): ToDo[] => {\n  return Object.keys(todos).map(t => todos[t]);\n}\n\nexport const FILTERS = [\n  {id: ACTIVE_FILTER, text: 'Active'},\n  {id: COMPLETED_FILTER, text: 'Completed'},\n  {id: ALL_FILTER, text: 'All'}\n];\n\nexport const getTodosBasedOnFilter = (todos: ToDo[], filter: string): ToDo[] => {\n  switch(filter) {\n    case ACTIVE_FILTER:\n      return todos.filter(t => !t.completed);\n    case COMPLETED_FILTER:\n      return todos.filter(t => t.completed);\n    default:\n      return todos;\n  }\n}\n\nexport const getNoOfActiveTodo = (todos: ToDo[]): number => {\n  return todos.filter(t => !t.completed).length;\n}\n","export const ENTER_KEY = 13;\nexport const ACTIVE_FILTER = '#ACTIVE_TODO#';\nexport const COMPLETED_FILTER = '#COMPLETED_TODO#';\nexport const ALL_FILTER = '#ALL_TODO#';\n","import * as React from \"react\";\nimport { FILTERS } from \"../utils\";\n\nexport interface TodoFooterProps {\n  activeFilter: string;\n  leftTodos: number;\n  onActiveFilter: (filter: { id: string; text: string }) => void;\n  onClearAll: () => void;\n}\n\nconst TodoFooter: React.FC<TodoFooterProps> = ({\n  activeFilter,\n  onActiveFilter,\n  leftTodos,\n  onClearAll\n}) => {\n  return (\n    <footer className=\"d-flex justify-content-between\">\n      <span>{leftTodos} left</span>\n      <div>\n        {FILTERS.map(filter => (\n          <button\n            type=\"button\"\n            className={`btn btn-light ${\n              filter.id === activeFilter ? \"active\" : \"\"\n            }`}\n            key={filter.id}\n            onClick={e => onActiveFilter(filter)}\n          >\n            {filter.text}\n          </button>\n        ))}\n      </div>\n      <span className=\"btn btn-link\" onClick={onClearAll}>clear all</span>\n    </footer>\n  );\n};\n\nexport default TodoFooter;\n","import * as React from \"react\";\nimport { ENTER_KEY } from \"../constants\";\nimport { ToDo } from \"../types\";\n\ninterface AddTodoProps {\n  onNewTodo: (todo: string) => void;\n}\n\nconst AddTodo: React.FC<AddTodoProps> = ({ onNewTodo }) => {\n  const onEnterKey = (e: React.KeyboardEvent) => {\n    const { value } = e.target as HTMLInputElement;\n    if (e.keyCode !== ENTER_KEY || !value.trim()) return;\n    onNewTodo(value);\n    (e.currentTarget as HTMLInputElement).value = '';\n  };\n\n  return (\n    <input\n      className=\"form-control form-control-lg\"\n      type=\"text\"\n      onKeyDown={onEnterKey}\n      placeholder=\"Write a Task\"\n      autoFocus\n    />\n  );\n};\n\nexport default AddTodo;\n","import { createUid } from \"../utils\";\nimport { NormalizedTodos } from \"../types\";\n\nconst randomStrings = ['Learn React', 'Use Typescript with React', 'Have Fun!!', \"Use emoji's\", 'Look at memes'];\n\nexport const mockTodos = ((strings: string[]) => {\n  const todos: NormalizedTodos = {};\n  strings.forEach((str, index) => {\n    const uid = createUid();\n    todos[uid] = {\n      id: uid,\n      text: str,\n      completed: false\n    };\n  });\n  return todos;\n})(randomStrings)","import * as React from \"react\";\nimport TodoHeader from \"./components/TodoHeader\";\nimport TodoList from \"./components/TodoList\";\nimport TodoFooter from \"./components/TodoFooter\";\nimport AddTodo from \"./components/AddTodo\";\nimport {\n  createUid,\n  getTodos,\n  getTodosBasedOnFilter,\n  getNoOfActiveTodo\n} from \"./utils\";\nimport { ToDo, NormalizedTodos, NormalizedState, Filter } from \"./types\";\nimport { ALL_FILTER } from \"./constants\";\nimport { mockTodos } from \"./mocks\";\n\nconst TodoApp = () => {\n  const [state, setState] = React.useState<NormalizedState>({\n    todos: {...mockTodos},\n    activeFilter: ALL_FILTER\n  });\n  const addNewTodo = (todo: string) => {\n    const { todos } = state;\n    const uid = createUid();\n    todos[uid] = {\n      id: uid,\n      text: todo,\n      completed: false\n    };\n    setState({ ...state, todos });\n  };\n\n  const completeTask = (id: string) => {\n    const { todos } = state;\n    const { completed } = todos[id];\n    todos[id].completed = !completed;\n    setState({ ...state, todos });\n  };\n\n  const deleteTask = (id: string) => {\n    const { todos } = state;\n    delete todos[id];\n    setState({ ...state, todos });\n  };\n\n  const setActiveFilter = (filter: Filter) => {\n    const activeFilter = filter.id;\n    setState({ ...state, activeFilter });\n  };\n\n  const clearAllTodos = () => {\n    setState({ todos: {}, activeFilter: ALL_FILTER });\n  };\n  const todos = getTodos(state.todos);\n  const showTodo = getTodosBasedOnFilter(todos, state.activeFilter);\n  const activeTodosNumber = getNoOfActiveTodo(todos);\n  return (\n    <div className=\"container p-3 w-50 border border-2\">\n      <TodoHeader />\n      <AddTodo onNewTodo={addNewTodo} />\n      <TodoList\n        onCompleteTask={completeTask}\n        onDeleteTodo={deleteTask}\n        todos={showTodo}\n      />\n      <TodoFooter\n        activeFilter={state.activeFilter}\n        leftTodos={activeTodosNumber}\n        onActiveFilter={setActiveFilter}\n        onClearAll={clearAllTodos}\n      />\n    </div>\n  );\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoApp from './TodoApp';\n\nReactDOM.render(<TodoApp />, document.getElementById('root'));\n"],"sourceRoot":""}